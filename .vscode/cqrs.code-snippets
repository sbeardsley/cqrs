{
    // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Command": {
      "scope": "go",
      "prefix": "cmd",
      "body": [
        "// ${1} command",
        "type ${1:command} struct {",
        "\tID int",
        "}",
        "",
        "// ${1}Handler handles ${1}",
        "type ${1}Handler struct {",
        "}",
        "",
        "// New${1}Handler command handler constructor",
        "func New${1}Handler() ${1}Handler {",
        "\treturn ${1}Handler{}",
        "}",
        "",
        "// NewCommand used during registration of handler",
        "func (h ${1}Handler) NewCommand() interface{} {",
        "\treturn &${1}{}",
        "}",
        "",
        "// Handle ${1}",
        "func (h ${1}Handler) Handle(message interface{}) error {",
        "",
        "\tcmd := message.(*${1})",
        "\tfmt.Printf(\"Executing handler for %v\", cmd)",
        "\t //Code goes here",
        "\t${0}",
        "",
        "\treturn nil",
        "}"
      ],
      "description": "Command and Command Handler"
    },
    "Query": {
        "scope": "go",
      "prefix": "qry",
      "body": [
        "// ${1} query",
        "type ${1:query} struct {",
        "\tID int",
        "}",
        "",
        "// ${2} model",
        "type ${2:model} struct {",
        "\t//properties...",
        "}",
        "",
        "// ${1}Handler handles ${1}",
        "type ${1}Handler struct {",
        "}",
        "",
        "// New${1}Handler query handler constructor",
        "func New${1}Handler() ${1}Handler {",
        "\treturn ${1}Handler{}",
        "}",
        "",
        "// NewQuery used during registration of handler",
        "func (h ${1}Handler) NewQuery() interface{} {",
        "\treturn &${1}{}",
        "}",
        "",
        "// Handle ${1}",
        "func (h ${1}Handler) Handle(message interface{}) (interface{}, error) {",
        "",
        "\tqry := message.(*${1})",
        "\tfmt.Printf(\"Executing handler for %v\", qry)",
        "\t //Code goes here",
        "\t${0}",
        "",
        "\tresult := &${2}{}",
        "\treturn result, nil",
        "}"
      ],
      "description": "Query, Model and Query Handler"
    }
  }
  